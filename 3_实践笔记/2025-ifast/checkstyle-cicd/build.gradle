plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyVersion}"
    id 'org.owasp.dependencycheck' version "${owaspDependencyCheckVersion}"
    id 'checkstyle'
}

allprojects {
    group = 'com.ifast.ipaymy'
    version = '0.0.1-SNAPSHOT'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    compileJava.options.encoding = 'UTF-8'

    if (!hasProperty('profile')) {
        ext.profile = 'local'
    }

    repositories {
        maven { url = 'https://plugins.gradle.org/m2/' }
        mavenCentral()
        maven {
            url = 'http://horizon.ifastfinancial.local:8003/nexus/content/groups/public'
            allowInsecureProtocol = true
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = '10.12.4'
        configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures = false
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependencyVersion}"
        }
    }

    dependencies {
        // Common Spring Boot Dependencies
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
//        implementation 'org.springframework.boot:spring-boot-starter-security'

        // Spring Cloud
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // OpenAPI & Swagger
        implementation "io.swagger.core.v3:swagger-annotations:${swaggerAnnotationVersion}"
        implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindVersion}"
        implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiWebMvcUIVersion}"

        implementation 'jakarta.validation:jakarta.validation-api'

        // Testing
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        // Utility Libraries
        implementation 'org.apache.commons:commons-lang3'
        implementation "org.apache.commons:commons-collections4:${apacheCommonCollectionVersion}"

        implementation "org.apache.httpcomponents:httpclient:${apacheHttpClientVersion}"
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    tasks.withType(Checkstyle).configureEach {
        reports {
            html.required = true
            xml.required = false
            html.outputLocation = layout.buildDirectory.file("reports/checkstyle/${name}.html")
        }
    }
}

tasks.register('checkstyleAll') {
    group = 'verification'
    description = 'Runs Checkstyle for all subprojects'
    dependsOn subprojects.collectMany { p ->
        ['checkstyleMain', 'checkstyleTest'].collect { t ->
            p.tasks.findByName(t)
        }.findAll { it != null }
    }
}

def filesListProp = "checkstyle.files.list"
def filesCsvProp = "checkstyle.files"

tasks.register('checkstyleStaged', Checkstyle) {
    description = "Runs Checkstyle only on files passed via -P$filesListProp or -P$filesCsvProp."
    group = "verification"

    classpath = files()

    def stagedPaths = []
    if (project.hasProperty(filesListProp)) {
        def listFile = file(project.property(filesListProp))
        if (listFile.exists()) {
            stagedPaths = listFile.readLines()
        }
    } else if (project.hasProperty(filesCsvProp)) {
        stagedPaths = project.property(filesCsvProp).split(',').collect { it.trim() }
    }

    def stagedFiles = stagedPaths
            .findAll { it.endsWith(".java") }
            .collect { file(it) }
            .findAll { it.exists() }

    onlyIf { !stagedFiles.isEmpty() }
    source stagedFiles
    include '**/*.java'

    reports {
        html.required = true
        xml.required = false
        html.outputLocation = layout.buildDirectory.file("reports/checkstyle/staged.html").get().asFile
    }

    ignoreFailures = false
}

tasks.withType(Checkstyle).configureEach {
    showViolations = false
    ignoreFailures = false
}