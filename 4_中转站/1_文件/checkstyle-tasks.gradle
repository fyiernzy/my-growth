apply plugin: 'checkstyle'
apply from: "$rootDir/gradle/git.gradle"


tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
        xml.outputLocation = layout.buildDirectory.file("reports/checkstyle/${name}.xml")
        html.outputLocation = layout.buildDirectory.file("reports/checkstyle/${name}.html")
    }
}

def exec = project.extensions.extraProperties

def filesProviderFor = { Closure<String> supplier ->
    providers.provider {
        def raw = supplier.call() as String
        return raw.readLines()
                .findAll { it.trim() }
                .collect { rootProject.file(it) }
                .findAll { it.exists() }
                .findAll { it.toPath().startsWith(project.projectDir.toPath()) }
                .asImmutable()
    }
}

def configureGitCheckstyle = { Checkstyle t, String desc, Provider<List<File>> diffText ->
    t.group = 'verification'
    t.description = desc
    t.configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    t.classpath = files()

    List<File> memo = null
    def getFiles = {
        if (memo == null) {
            memo = diffText.get()
        }
        memo
    }

    // real inputs for Gradle
    t.inputs.files { project.files(getFiles()) }
    t.source { project.files(getFiles()) }

    t.outputs.upToDateWhen { false }

    t.onlyIf {
        def files = getFiles()
        if (files.isEmpty()) {
            logger.lifecycle("[${t.name}] [${project.path}] SKIPPED â€“ No matching Java files in this module")
            false
        } else {
            logger.lifecycle("[${t.name}] [${project.path}] Will run checkstyle on ${files.size()} file(s)")
            true
        }
    }
}

if (childProjects.isEmpty()) {
    tasks.register("checkstyleFiles", Checkstyle) { t ->
        List<File> resolvedFiles = getFilesFromProperty(project)
        def diffText = project.provider { resolvedFiles }
        configureGitCheckstyle(t, "Run Checkstyle on staged Java files in this ${project.path}.", diffText)
    }

    tasks.register('checkstyleStaged', Checkstyle) { t ->
        def diffText = filesProviderFor { exec.loadStagedJava(project.projectDir, false) }
        configureGitCheckstyle(t, "Run Checkstyle on staged Java files in this ${project.path}.", diffText)
    }

// --- checkstyleUnstaged (worktree vs index)
    tasks.register('checkstyleUnstaged', Checkstyle) { t ->
        def diffText = filesProviderFor { exec.loadUnstagedJava(project.projectDir, false) }
        configureGitCheckstyle(t, 'Run Checkstyle on unstaged Java files in this module.', diffText)
    }

// --- checkstyleCommittedBetween (olderRef..newerRef; overridable via -PolderRef / -PnewerRef)
    tasks.register('checkstyleCommittedBetween', Checkstyle) { t ->
        def diffText = filesProviderFor {
            def older = providers.gradleProperty('olderRef').orElse('HEAD~1').get()
            def newer = providers.gradleProperty('newerRef').orElse('HEAD').get()
            exec.loadCommittedJava(older, newer, project.projectDir, false)
        }
        configureGitCheckstyle(t, 'Run Checkstyle on Java files changed between two refs (olderRef..newerRef).', diffText)
    }

// --- checkstyleLastCommitted (HEAD~1..HEAD)
    tasks.register('checkstyleLastCommitted', Checkstyle) { t ->
        def diffText = filesProviderFor { exec.loadLastCommittedJava(project.projectDir, false) }
        configureGitCheckstyle(t, 'Run Checkstyle on Java files from the last commit in this module (HEAD~1..HEAD).', diffText)
    }

// --- wire into `check`
    tasks.named('check') {
        dependsOn 'checkstyleStaged', 'checkstyleUnstaged', 'checkstyleCommittedBetween', 'checkstyleLastCommitted'
    }
}