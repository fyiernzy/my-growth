plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.hibernate.orm' version '6.6.22.Final'
    id 'org.graalvm.buildtools.native' version '0.10.6'
    id 'com.google.protobuf' version '0.9.4'
    id 'checkstyle'
    id 'org.openapi.generator' version '7.6.0'
}

apply plugin: 'checkstyle'
apply from: "$rootDir/gradle/checkstyle-tasks.gradle"

version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
    set('springGrpcVersion', "0.9.0")
    set('springModulithVersion', "1.4.1")
}

checkstyle {
    toolVersion = '10.26.1'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-amqp'
//    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.postgresql:postgresql:42.7.7'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Observability
    implementation("p6spy:p6spy:3.9.1")
    implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter'
    implementation "io.opentelemetry.instrumentation:opentelemetry-jdbc"
    implementation "io.opentelemetry.instrumentation:opentelemetry-hikaricp-3.0"
    runtimeOnly 'io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0'
    runtimeOnly "io.opentelemetry:opentelemetry-exporter-logging"
}

dependencyManagement {
    imports {
//        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
//        mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
//        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${otelVersion}"
    }
}
tasks.named('test') {
    useJUnitPlatform()
}

def apis = [
        student: [
                spec       : file("$projectDir/src/main/openApiProperties/studentApi.yaml"),
                basePackage: "com.example.student",     // -> src/main/java/student/...
                apiPkgSfx  : "api",
                modelPkgSfx: "model",
                invokerSfx : "invoker"
        ],
]

//def openapiRoot = layout.buildDirectory.dir("generated/openapi")
//def openapiTasks = []
//
//apis.each { name, configuration ->
//    def outDirProvider = openapiRoot.map { it.dir(name) }
//    def taskName = "openApiGenerate_${name}"
//
//    task.register(taskName, org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
//        generatorName.set("spring")
//        inputSpec.set(cfg.spec.absolutePath)
//        outputDir.set(outDirProvider.map { it.asFile.absolutePath })
//
//        def apiPkg = "${cfg.basePackage}.${cfg.apiPkgSfx}"
//        def modelPkg = "${cfg.basePackage}.${cfg.modelPkgSfx}"
//        def invokerPkg = "${cfg.basePackage}.${cfg.invokerSfx}"
//
//        apiPackage.set(apiPkg)
//        modelPackage.set(modelPkg)
//        invokerPackage.set(invokerPkg)
//
//        globalProperties.set([apis: "", models: ""]) // only generate APIs & models
//        configOptions.set([
//                useSpringBoot3 : 'true',
//                interfaceOnly  : 'true',
//                delegatePattern: 'true',
//                useTags        : 'true',
//                dateLibrary    : 'java8',
//                lombok         : 'true',
//                openApiNullable: 'false',
//                library        : 'spring-boot'
//        ])
//    }
//
//    sourceSets.main.java.srcDir(outDirProvider.map { it.dir("src/main/java") })
//
//    openapiTasks << tasks.named(taskName)
//}
//
//tasks.named('compileJava') {
//    dependsOn(openapiTasks)
//}