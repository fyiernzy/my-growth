#!/usr/bin/env bash

set -Eeuo pipefail

# =============================
# Colors & pretty helpers
# =============================
init_colors() {
  if [[ -t 1 && -z "${NO_COLOR:-}" ]] && command -v tput >/dev/null 2>&1; then
    local n; n="$(tput colors 2>/dev/null || echo 0)"
    if (( n >= 8 )); then
      BLUE="$(tput setaf 4)"; GREEN="$(tput setaf 2)"; RED="$(tput setaf 1)"
      BOLD="$(tput bold)"; RESET="$(tput sgr0)"; return
    fi
  fi
  BLUE=''; GREEN=''; RED=''; BOLD=''; RESET=''
}

header()      { printf "%s%s==>%s %s%s\n" "$BLUE" "$BOLD" "$RESET" "$1" "$RESET"; }
footer_ok()   { printf "%s✔%s %s\n" "$GREEN" "$RESET" "$1"; }
footer_fail() { printf "%s✖%s %s\n" "$RED" "$RESET" "$1"; }

# =============================
# Spinner (kill-on-stop; robust)
# =============================
SPINNER_PID=""
start_spinner() {
  local msg="${1:-Working}"
  local chars='|/-\'
  printf "%s " "$msg"
  (
    local i=0
    while :; do
      i=$(( (i+1) % 4 ))
      printf "\r%s %s" "$msg" "${chars:$i:1}"
      sleep 0.1
    done
  ) &
  SPINNER_PID=$!
}
stop_spinner() {
  local status=${1:-0}
  if [[ -n "${SPINNER_PID:-}" ]]; then
    kill "$SPINNER_PID" 2>/dev/null || true
    wait "$SPINNER_PID" 2>/dev/null || true
    SPINNER_PID=""
  fi
  printf "\r%-80s\r" ""  # clear line
  if [[ $status -eq 0 ]]; then
    footer_ok "Pre-commit Checkstyle passed."
  fi
}

# =============================
# Clickable link helper (OSC-8 hyperlink with fallback)
# =============================
osc_link() {
  # Usage: osc_link "label text" "https://url-or-file-uri"
  local label="$1" url="$2"
  printf "\e]8;;%s\a%s\e]8;;\a" "$url" "$label"
}

# =============================
# Custom failure block (with copy-paste repro command)
# args:
#   $1: report_uri (file://…)
#   $2: repro_cmd  (one-liner to reproduce)
# =============================
print_custom_failure() {
  local report_uri="${1:-file:///./build/reports/checkstyle/staged.html}"
  local repro_cmd="${2:-}"

  # Two blank lines (as requested), then red+bold headline
  printf "\n\n%s%sCheckstyle violations found (staged files). Commit aborted.%s\n" "$RED" "$BOLD" "$RESET"

  # Clickable link via OSC-8 (with the raw URI as label)
  local clickable; clickable="$(osc_link "$report_uri" "$report_uri")"
  printf "Open the staged report at: %s\n\n" "$clickable"

  printf "Re-run locally (copy & paste):\n  %s\n\n" "$repro_cmd"

  cat <<'EOF'
Next steps:
  • Fix the violations shown in the report.
  • Re-run locally (above one-liner).
  • To debug the hook itself:
      bash -x .githooks/pre-commit
EOF
}

# =============================
# Main
# =============================
init_colors
header "Running pre-commit checks (Checkstyle)…"

# Emergency bypass (discourage routine use)
if [[ "${SKIP_CHECKSTYLE:-0}" == "1" ]]; then
  echo "SKIP_CHECKSTYLE=1 set; skipping Checkstyle."
  exit 0
fi

# Repo root
project_root="$(git rev-parse --show-toplevel 2>/dev/null || true)"
[[ -n "$project_root" ]] || { echo "Not a git repository."; exit 1; }
cd "$project_root"

# Build Gradle command (wrapper preferred)
declare -a GRADLE_CMD
if [[ -x "$project_root/gradlew" ]]; then
  GRADLE_CMD=("$project_root/gradlew")
elif [[ -f "$project_root/gradlew" ]]; then
  GRADLE_CMD=("bash" "$project_root/gradlew")
elif command -v gradle >/dev/null 2>&1; then
  GRADLE_CMD=("gradle")
else
  footer_fail "Gradle wrapper not found and Gradle is not on PATH."
  cat <<'EOF'
Fix:
  • Ensure the Gradle wrapper exists and is executable:
      ls -l ./gradlew
      chmod +x ./gradlew
  • Or install Gradle and ensure it's on PATH.
  • Re-run your commit after fixing the above.
EOF
  exit 1
fi

# Quiet, plain console for predictable parsing
GRADLE_ARGS=(--quiet --console=plain)

# Friendly display command for the repro one-liner
if [[ -f "$project_root/gradlew" ]]; then
  DISPLAY_GRADLE_CMD="./gradlew"
else
  DISPLAY_GRADLE_CMD="gradle"
fi
DISPLAY_GRADLE_ARGS="--quiet --console=plain"

# Collect staged Java files
TMP_LIST="$(mktemp 2>/dev/null || mktemp -t checkstyle_staged)"
trap 'rm -f "$TMP_LIST" "${LOGFILE:-}" 2>/dev/null || true' EXIT

git diff --cached --name-only -z --diff-filter=ACMR \
  | grep -z '\.java$' \
  | tr '\0' '\n' \
  | sed '/^$/d' > "$TMP_LIST" || true

# Fast path: nothing to check
if [[ ! -s "$TMP_LIST" ]]; then
  echo "No staged Java files detected; skipping Checkstyle."
  exit 0
fi

echo "Detected staged Java files:"
while IFS= read -r f; do printf '  - %s\n' "$f"; done < "$TMP_LIST"

# Check if staged-only task exists
USE_STAGED=0
if "${GRADLE_CMD[@]}" -q help --task checkstyleStaged >/dev/null 2>&1; then
  USE_STAGED=1
fi

# Report paths
REPORT_MAIN_HTML="build/reports/checkstyle/main.html"
REPORT_STAGED_HTML="build/reports/checkstyle/staged.html"
ABS_REPORT_PATH="$project_root/$REPORT_STAGED_HTML"
if (( USE_STAGED == 0 )); then
  ABS_REPORT_PATH="$project_root/$REPORT_MAIN_HTML"
fi

# Build a robust file:// URI
if command -v cygpath >/dev/null 2>&1; then
  win_path="$(cygpath -w "$ABS_REPORT_PATH")"
  win_path="${win_path//\\//}"
  ABS_REPORT_URI="file:///$win_path"
else
  ABS_REPORT_URI="file://$ABS_REPORT_PATH"
fi

# Build the exact copy/paste repro command (Git Bash / bash one-liner)
if (( USE_STAGED )); then
  REPRO_CMD="TMP=\"\$(mktemp 2>/dev/null || mktemp -t checkstyle_staged)\"; git diff --cached --name-only -z --diff-filter=ACMR | grep -z '\\.java$' | tr '\\0' '\\n' | sed '/^\\$/d' > \"\$TMP\"; $DISPLAY_GRADLE_CMD $DISPLAY_GRADLE_ARGS -Pcheckstyle.files.list=\"\$TMP\" checkstyleStaged; rm -f \"\$TMP\""
else
  # If the custom task is missing, provide a fallback command that users can still run
  REPRO_CMD="$DISPLAY_GRADLE_CMD $DISPLAY_GRADLE_ARGS checkstyleMain"
fi

# Run Gradle with a spinner and capture logs
LOGFILE="$(mktemp 2>/dev/null || mktemp -t checkstyle_hook)"

if (( USE_STAGED )); then
  start_spinner "Running Checkstyle on staged files…"
  if "${GRADLE_CMD[@]}" "${GRADLE_ARGS[@]}" \
        -Pcheckstyle.files.list="$TMP_LIST" \
        checkstyleStaged >"$LOGFILE" 2>&1; then
    stop_spinner 0
    exit 0
  else
    stop_spinner 1
    print_custom_failure "$ABS_REPORT_URI" "$REPRO_CMD"
    [[ "${CS_DEBUG:-0}" == "1" ]] && { echo; echo "--- Debug log from Gradle ---"; cat "$LOGFILE"; }
    exit 1
  fi
else
  start_spinner "Running Checkstyle (fallback: full source set)…"
  if "${GRADLE_CMD[@]}" "${GRADLE_ARGS[@]}" \
        checkstyleMain >"$LOGFILE" 2>&1; then
    stop_spinner 0
    exit 0
  else
    stop_spinner 1
    print_custom_failure "$ABS_REPORT_URI" "$REPRO_CMD"
    [[ "${CS_DEBUG:-0}" == "1" ]] && { echo; echo "--- Debug log from Gradle ---"; cat "$LOGFILE"; }
    exit 1
  fi
fi
