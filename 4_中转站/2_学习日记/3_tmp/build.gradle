plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
}

apply plugin: 'checkstyle'
apply from: "$rootDir/gradle/checkstyle-tasks.gradle"

group = 'com.ngzhiyang'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:2.18.1-alpha"
    }
}

checkstyle {
    toolVersion = '10.26.1'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = false
}

dependencies {
    /* ---------- Spring Boot core ---------- */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    /* ---------- Useful libraries ---------- */
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'org.apache.commons:commons-collections4:4.5.0'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.2.2'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    /* ---------- Testing ---------- */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.intuit.karate:karate-junit5:1.4.1'
    testImplementation 'org.instancio:instancio-core:3.4.0'
    testImplementation 'org.instancio:instancio-junit:3.4.0'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'

    /* ---------- Database ---------- */
    runtimeOnly 'com.h2database:h2'
    // SQL logging via datasource-proxy (optional, leave if you use it)
    // implementation 'com.github.gavlyukovskiy:datasource-proxy-spring-boot-starter:1.12.0'
    implementation("p6spy:p6spy:3.9.1")
//    implementation("com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.12.0")

    /* ---------- Observability: OpenTelemetry + Micrometer ---------- */
    // Spring Boot starter for OTel (auto-configures SDK and common instrumentations)
    implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter'

    // JDBC & HikariCP instrumentation (align with your HikariCP version; Boot 3.5.x uses HikariCP 5.x)
    implementation 'io.opentelemetry.instrumentation:opentelemetry-jdbc'
    implementation 'io.opentelemetry.instrumentation:opentelemetry-hikaricp-3.0'

    // Logback appender & MDC (NO explicit versions; BOM applies). This fixes the ClassNotFound for v1_4 appender.
    runtimeOnly 'io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0'
    runtimeOnly 'io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0'

    // OTel exporters (keep logging exporter for local dev visibility)
    implementation 'io.opentelemetry:opentelemetry-exporter-logging'

    // Micrometer <-> OpenTelemetry bridge and Prometheus registry
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-observation'

    implementation('io.prometheus:prometheus-metrics-tracer-common')
    implementation("io.opentelemetry:opentelemetry-exporter-zipkin")
}

tasks.named('test') {
    useJUnitPlatform()
}